structure A = Absyn

fun removePosFromExpSeqTuple(exp,pos) =
  exp
%%
%term
    EOF 
  | ID of string
  | INT of int | STRING of string 
  | COMMA | COLON | SEMICOLON | LPAREN | RPAREN | LBRACK | RBRACK 
  | LBRACE | RBRACE | DOT 
  | PLUS | MINUS | TIMES | DIVIDE | EQ | NEQ | LT | LE | GT | GE
  | AND | OR | ASSIGN
  | ARRAY | IF | THEN | ELSE | WHILE | FOR | TO | DO | LET | IN | END | OF 
  | BREAK | NIL
  | FUNCTION | VAR | TYPE | UMINUS

%nonterm program of A.exp  
| exp of A.exp
| decs of A.dec list
| dec of A.dec
| tydec of {name:A.symbol, ty:A.ty, pos:A.pos}
| tydecs of {name:A.symbol, ty:A.ty, pos:A.pos} list
| ty of A.ty
| tyfields of A.field list
| tyfieldscomma of A.field list
| vardec of A.dec
| fundec of A.fundec
| fundecs of A.fundec list
| lvalue of A.var
| funarg of A.exp list
| expseq of (A.exp * int) list
| expSC of (A.exp * int) list
| expCommaKleene of A.exp list
| letbody of A.exp
| field of (A.symbol*A.exp*A.pos) list
| fields of (A.symbol*A.exp*A.pos) list

%pos int
%verbose
%start program
%eop EOF
%noshift EOF

%name Tiger

%keyword WHILE FOR TO BREAK LET IN END FUNCTION VAR TYPE ARRAY IF THEN ELSE 
	DO OF NIL

%prefer THEN ELSE LPAREN

%value ID ("bogus")
%value INT (1)
%value STRING ("")
%nonassoc ID
%nonassoc OF
%nonassoc THEN
%nonassoc ELSE
%nonassoc DO ASSIGN
%nonassoc LBRACK RBRACK
%left OR
%left AND
%nonassoc EQ NEQ GT LT GE LE
%left MINUS PLUS
%left DIVIDE TIMES
%left UMINUS
%%

program	: exp				                  (exp)

decs:  dec decs                       (dec::decs)
  | dec                                  ([dec])

dec: tydecs                            (A.TypeDec(tydecs))
  | vardec                             (vardec)
  | fundecs                            (A.FunctionDec(fundecs))

tydecs: tydec tydecs          (tydec::tydecs)
  | tydec                     ([tydec])

tydec: TYPE ID EQ ty  ({name=Symbol.symbol(ID),ty=ty,pos = TYPEleft})

ty: ID                                (A.NameTy(Symbol.symbol(ID),IDleft))
  | LBRACE tyfields RBRACE            (A.RecordTy(tyfields))
  | ARRAY OF ID                       (A.ArrayTy(Symbol.symbol(ID),IDleft))
  | LBRACE RBRACE                     (A.RecordTy([]))

tyfields:  ID COLON ID tyfieldscomma  ({name= Symbol.symbol(ID1), escape= ref false, typ=Symbol.symbol(ID2) , pos=ID1left }::tyfieldscomma)

tyfieldscomma: tyfieldscomma COMMA ID COLON ID  (tyfieldscomma @ [{name= Symbol.symbol(ID1), escape= ref false, typ=Symbol.symbol(ID2), pos=ID1left}])
|                                           ([])

vardec: VAR ID ASSIGN exp             (A.VarDec({name = Symbol.symbol(ID), escape = ref false, typ = NONE, init = exp, pos = VARleft}))
  | VAR ID COLON ID ASSIGN exp        (A.VarDec({name = Symbol.symbol(ID1), escape = ref false, typ = SOME((Symbol.symbol(ID2),ID2left)), init = exp, pos = VARleft}))

fundec :  FUNCTION ID LPAREN tyfields RPAREN EQ exp  ({name=Symbol.symbol(ID), params = tyfields, result = NONE, body = exp, pos = FUNCTIONleft })
  | FUNCTION ID LPAREN RPAREN EQ exp ({name=Symbol.symbol(ID), params = [], result = NONE, body = exp, pos = FUNCTIONleft })
  | FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ exp ({name=Symbol.symbol(ID1), params = tyfields, result = SOME(Symbol.symbol(ID2), ID2left), body = exp, pos = FUNCTIONleft })
  | FUNCTION ID LPAREN RPAREN COLON ID EQ exp ({name=Symbol.symbol(ID1), params = [], result = SOME(Symbol.symbol(ID2), ID2left), body = exp, pos = FUNCTIONleft })

fundecs:  fundecs  fundec                           (fundecs @ [fundec])
  | fundec                                          ([fundec])   

lvalue: ID                                        (A.SimpleVar(Symbol.symbol(ID),IDleft))
  | ID LBRACK exp RBRACK                          (A.SubscriptVar(A.SimpleVar(Symbol.symbol(ID),IDleft),exp,IDleft))
  | lvalue LBRACK exp RBRACK                      (A.SubscriptVar(lvalue,exp,lvalueleft))
  | lvalue DOT ID                                 (A.FieldVar(lvalue,Symbol.symbol(ID),lvalueleft))


exp:  lvalue                                        (A.VarExp(lvalue))
  | INT                                             (A.IntExp(INT))
  | STRING                                          (A.StringExp(STRING,STRINGleft))
  | NIL                                             (A.NilExp)
  | lvalue ASSIGN exp                               (A.AssignExp({var = lvalue, exp= exp, pos = lvalueleft}))
  | BREAK                                           (A.BreakExp(BREAKleft))
  | LPAREN RPAREN                                   (A.SeqExp([]))
  | LET decs IN letbody END                         (A.LetExp({decs=decs, body = letbody, pos = LETleft}))
  | WHILE exp DO exp                                (A.WhileExp({test = exp1, body = exp2, pos = WHILEleft}))
  | FOR ID ASSIGN exp TO exp DO exp                (A.ForExp{var=Symbol.symbol(ID), escape = ref false, lo = exp1 , hi = exp2, body=exp3, pos = FORleft})
  | expseq                                          (A.SeqExp(expseq))
  | ID LBRACK exp RBRACK OF exp                     (A.ArrayExp( {typ=Symbol.symbol(ID), size = exp1, init = exp2, pos = IDleft}))
  | ID LBRACE fields RBRACE                         (A.RecordExp({fields = fields, typ = Symbol.symbol(ID), pos = IDleft}))
  | ID LPAREN funarg RPAREN                         (A.CallExp({func = Symbol.symbol(ID), args = funarg, pos = IDleft}))
  | IF exp THEN exp                                 (A.IfExp({test=exp1,then'=exp2, else'=NONE,pos=IFleft}))
  | IF exp THEN exp ELSE exp                        (A.IfExp{test=exp1, then'=exp2, else'= SOME(exp3), pos = IFleft})
  | exp PLUS exp                                    (A.OpExp({left = exp1, oper = A.PlusOp, right = exp2, pos = exp1left}))
  | exp MINUS exp (A.OpExp({left=exp1, oper = A.MinusOp, right = exp2, pos = exp1left}))
  | exp TIMES exp (A.OpExp({left = exp1, oper = A.TimesOp, right = exp2, pos = exp1left}))
  | MINUS exp %prec UMINUS (A.OpExp({left = A.IntExp(0), oper = A.MinusOp, right = exp, pos=MINUSleft}))
  | exp DIVIDE exp (A.OpExp({left = exp1, oper = A.DivideOp, right = exp2, pos = exp1left}))
  | exp NEQ exp (A.OpExp({left = exp1, oper = A.NeqOp, right = exp2, pos = exp1left}))
  | exp EQ exp (A.OpExp({left = exp1, oper = A.EqOp, right = exp2, pos = exp1left }))
  | exp GT exp (A.OpExp({left = exp1, oper = A.GtOp,right = exp2, pos = exp1left}))
  | exp GE exp  (A.OpExp({left = exp1, oper = A.GeOp, right = exp2, pos = exp1left}))
  | exp LT exp (A.OpExp({left = exp1, oper = A.LtOp, right = exp2, pos = exp1left}))
  | exp LE exp (A.OpExp({left = exp1, oper = A.LeOp, right = exp2, pos = exp1left}))
  | exp AND exp (A.IfExp({test=exp1, then'=exp2, else'= SOME(A.IntExp(0)),pos = exp1left}))
  | exp OR exp  (A.IfExp({test=exp1, then'=A.IntExp(1), else'= SOME(exp2), pos = exp1left}))
  
fields:  ID EQ exp field                        ((Symbol.symbol(ID),exp,IDleft)::field)
  |                                             ([])

letbody:   expSC                                   (A.SeqExp(expSC))
  |                                                (A.SeqExp([]))

field: COMMA ID EQ exp  field                   ((Symbol.symbol(ID),exp,IDleft)::field)
  |                                             ([])

funarg:  exp expCommaKleene                         (exp::expCommaKleene)
  |                                                 ([])

expCommaKleene: COMMA exp expCommaKleene            (exp::expCommaKleene)
  |                                                 ([])

expseq: LPAREN expSC RPAREN                         (expSC)

expSC: exp                                          ([(exp,expleft)])
  | expSC SEMICOLON exp                             (expSC @ [(exp,expleft)])